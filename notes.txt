Package
	- workspace 
	- related code
	- Two types
		- Executable (Runnable files) 
			- Must be called "package main"
			- Must ALWAYS have "func main" as a function
			- GO build makes executable
		- Reusable (Helpers. Reusable logic) 
			- "Any other name will make reusable"
			- Makes no executable
	- Files in the same package can freely call functions defined in other files. WITHOUT import!

Run 
 - go run main.go
 - go run main.go deck.go 

Import
	- fmt (format)
	- golang.org/pkg (All standart packages)
		
functions
	- func bobFun()
	- func bobFunction(bobInput string) string  

Basic types
	- bool
	- string
	- int
	- float64

Vars
	- var bob string = ""
	- bob := "" (Creating a new var)
	- bob = ""  (Reassigning an existing var)
	- Can do this, create and assign separatly:
		- var bob string
		- bob = "bob"
	- This initial creation can be done outside of function scope
	- assigning a variable outside of function scope it NOT possible

Data Structures
	- Array
		- Fixed length of records
	- Slice
		- Can grow and shrink
		- bobSlice := []string{"bob", "bob2"} 
		- append(cards, "Six of Spades")
			- Returns a new slice of cards with a new element

iterate
	- for i, card := range cards {
		fmt.Println(i, card)
      }

types
	- type bob []string
		- creates a type called bob, used to extend functionality of, in this case, a slice